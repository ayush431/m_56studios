# Generated by Django 3.2.9 on 2022-01-29 10:29

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='user_model',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('editor', 'Editor'), ('reviewer', 'Reviewer'), ('manager', 'Manager'), ('super_admin', 'Super_admin')], default='reviewer', max_length=50, verbose_name='Type')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('email_valid', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='question',
            fields=[
                ('qn_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question', models.CharField(max_length=254)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('image_url', models.CharField(max_length=2000, null=True)),
                ('original_image_url', models.CharField(max_length=2000, null=True)),
                ('cropped_json', models.JSONField(blank=True, null=True)),
                ('difficulty_level', models.CharField(choices=[('Easy', 'easy'), ('Medium', 'medium'), ('Hard', 'hard'), ('Very Hard', 'very_hard')], max_length=50, null=True, verbose_name='Type')),
                ('category', models.CharField(choices=[('PEOPLE', 'People'), ('POLITICS', 'Politics'), ('BUSINESS & TECH', 'Business & Tech'), ('CARS', 'Cars'), ('ART', 'Art'), ('TRUE OR FALSE', 'True_or_false'), ('I SPY', 'I_spy'), ("WHO's THIS", "Who's this"), ('MATH', 'Math'), ('SCIENCE', 'Science'), ('FOOD', 'Food'), ('HISTORY', 'History'), ('BOOKS', 'Books'), ('LIFESTYLE', 'Lifestyle'), ('MUSIC', 'Music'), ('WORD JAM', 'Word_jam'), ('GEOGRAPHY', 'Geography'), ('SPORTS', 'Sports'), ('ENTERTAINMENT', 'Entertainment')], max_length=50, null=True, verbose_name='Type')),
                ('model_release', models.BooleanField(default=False)),
                ('property_release', models.BooleanField(default=False)),
                ('license', models.CharField(max_length=254, null=True)),
                ('system_check', models.CharField(choices=[('Valid', 'valid'), ('Invalid', 'invalid'), ('Duplicate', 'duplicate')], max_length=50, null=True, verbose_name='Type')),
                ('invalid_reason', models.CharField(blank=True, max_length=254, null=True)),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('For Review', 'For Review'), ('Approved', 'Approved'), ('Rejected', 'Rejected By Editor'), ('Image Rejected', 'Image Rejected'), ('Question Rejected', 'Question Rejected'), ('Ready To Publish', 'Ready To Publish'), ('Published', 'Published'), ('ReReview', 'Re Review'), ('Discarded', 'Discarded'), ('Overwritten', 'Overwritten')], default='Draft', max_length=50, verbose_name='Type')),
                ('is_image_hint', models.BooleanField(default=False)),
                ('original_qn_id', models.CharField(max_length=254)),
                ('vendor_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('vendor_name', models.CharField(max_length=254, null=True)),
                ('qn_submitted_date', models.DateField(null=True)),
                ('rejected_by_editor', models.BooleanField(default=False)),
                ('qn_rejected_by_reviewer', models.BooleanField(default=False)),
                ('img_rejected_by_reviewer', models.BooleanField(default=False)),
                ('approved_by_reviewer', models.BooleanField(default=False)),
                ('approved_by_manager', models.BooleanField(default=False)),
                ('rereview_by_manager', models.BooleanField(default=False)),
                ('published', models.BooleanField(default=False)),
                ('discarded_by_editor', models.BooleanField(default=False)),
                ('should_overwrite', models.BooleanField(default=False)),
                ('reason_for_overwrite', models.TextField(null=True)),
                ('exported_date', models.DateTimeField(default=None, null=True)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_id_key', to=settings.AUTH_USER_MODEL)),
                ('user_reviewed', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_reviewed_key', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='status_log',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('old_status', models.CharField(choices=[('Draft', 'Draft'), ('For Review', 'For Review'), ('Approved', 'Approved'), ('Rejected', 'Rejected By Editor'), ('Image Rejected', 'Image Rejected'), ('Question Rejected', 'Question Rejected'), ('Ready To Publish', 'Ready To Publish'), ('Published', 'Published'), ('ReReview', 'Re Review'), ('Discarded', 'Discarded'), ('Overwritten', 'Overwritten')], max_length=50, null=True, verbose_name='Type')),
                ('new_status', models.CharField(choices=[('Draft', 'Draft'), ('For Review', 'For Review'), ('Approved', 'Approved'), ('Rejected', 'Rejected By Editor'), ('Image Rejected', 'Image Rejected'), ('Question Rejected', 'Question Rejected'), ('Ready To Publish', 'Ready To Publish'), ('Published', 'Published'), ('ReReview', 'Re Review'), ('Discarded', 'Discarded'), ('Overwritten', 'Overwritten')], max_length=50, null=True, verbose_name='Type')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('qn_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.question')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='options',
            fields=[
                ('opt_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('option', models.CharField(max_length=254)),
                ('is_correct', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('qn_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.question')),
            ],
        ),
        migrations.CreateModel(
            name='comments',
            fields=[
                ('cmt_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment', models.CharField(max_length=2000)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('qus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
